cmake_minimum_required(VERSION 2.8.12)

project("spdm-device-attester" C)

#
# Build Configuration Macro Definition
#
MESSAGE("#########################")
MESSAGE("## Build Configuration ##")
MESSAGE("#########################")

SET(ARCH ${ARCH} CACHE STRING "Choose the arch of build: ia32 x64" FORCE)
SET(TOOLCHAIN ${TOOLCHAIN} CACHE STRING "Choose the toolchain of build: Linux: GCC CLANG" FORCE)
SET(CMAKE_BUILD_TYPE ${TARGET} CACHE STRING "Choose the target of build: Debug Release" FORCE)
SET(CRYPTO ${CRYPTO} CACHE STRING "Choose the crypto of build: mbedtls openssl" FORCE)
SET(GCOV ${GCOV} CACHE STRING "Choose the target of Gcov: ON  OFF, and default is OFF" FORCE)
SET(STACK_USAGE ${STACK_USAGE} CACHE STRING "Choose the target of STACK_USAGE: ON  OFF, and default is OFF" FORCE)

if(NOT GCOV)
    SET(GCOV "OFF")
endif()

if(NOT STACK_USAGE)
    SET(STACK_USAGE "OFF")
endif()

SET(LIBSPDM_DIR ${PROJECT_SOURCE_DIR}/../spdm-emu/libspdm)
SET(SPDM_EMU_DIR ${PROJECT_SOURCE_DIR}/../spdm-emu)
SET(TEEIO_VALIDATOR_DIR ${PROJECT_SOURCE_DIR}/teeio_validator)
SET(SPDM_DEVICE_DIR ${PROJECT_SOURCE_DIR})
SET(TEEIO_VALIDATOR_LIB_DIR ${PROJECT_SOURCE_DIR}/library)

#
# OpenSSL specific compiled libraries.
#
SET(COMPILED_LIBCRYPTO_PATH ${COMPILED_LIBCRYPTO_PATH} CACHE STRING "Optionally provide a path to libcrypto" FORCE)
SET(COMPILED_LIBSSL_PATH ${COMPILED_LIBSSL_PATH} CACHE STRING "Optionally provide a path to libssl" FORCE)

if(ARCH STREQUAL "x64")
    MESSAGE("ARCH = x64")
elseif(ARCH STREQUAL "ia32")
    MESSAGE("ARCH = ia32")
else()
    MESSAGE(FATAL_ERROR "Unkown ARCH")
endif()

if(CMAKE_SYSTEM_NAME MATCHES "Linux")
    if(TOOLCHAIN STREQUAL "GCC")
        MESSAGE("TOOLCHAIN = GCC")
    elseif(TOOLCHAIN STREQUAL "CLANG")
        MESSAGE("TOOLCHAIN = CLANG")
    else()
        MESSAGE(FATAL_ERROR "Unkown TOOLCHAIN")
    endif()
    if(GCOV STREQUAL "ON")
        MESSAGE("GCOV = ON")
    elseif(GCOV STREQUAL "OFF")
        MESSAGE("GCOV = OFF")
    else()
        MESSAGE(FATAL_ERROR "Unkown GCOV switch input")
    endif()
    if(STACK_USAGE STREQUAL "ON")
        MESSAGE("STACK_USAGE = ON")
    endif()
else()
    MESSAGE(FATAL_ERROR "${CMAKE_SYSTEM_NAME} is not supportted")
endif()

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    MESSAGE("TARGET = Debug")
elseif(CMAKE_BUILD_TYPE STREQUAL "Release")
    MESSAGE("TARGET = Release")
else()
    MESSAGE(FATAL_ERROR "Unkown build type")
endif()

if(CRYPTO STREQUAL "mbedtls")
    MESSAGE("CRYPTO = mbedtls")
elseif(CRYPTO STREQUAL "openssl")
    MESSAGE("CRYPTO = openssl")
else()
    MESSAGE(FATAL_ERROR "Unkown CRYPTO")
endif()

if(ENABLE_BINARY_BUILD STREQUAL "1")
    if(NOT CRYPTO STREQUAL "openssl")
        MESSAGE(FATAL_ERROR "enabling binary build not supported for non-openssl")
    endif()

    if(NOT COMPILED_LIBCRYPTO_PATH)
        MESSAGE(FATAL_ERROR "enabling binary build requires path to libcrypto.")
    endif()

    if(NOT COMPILED_LIBSSL_PATH)
        MESSAGE(FATAL_ERROR "enabling binary build requires path to libssl.")
    endif()

    MESSAGE("ENABLE_BINARY_BUILD=1")
    MESSAGE("COMPILED_LIBCRYPTO_PATH=${COMPILED_LIBCRYPTO_PATH}")
    MESSAGE("COMPILED_LIBSSL_PATH=${COMPILED_LIBSSL_PATH}")

    SET(CRYPTO_LIB_PATHS ${COMPILED_LIBCRYPTO_PATH} ${COMPILED_LIBSSL_PATH})
else()
    SET(CRYPTO_LIB_PATHS ${CRYPTO}lib)
    MESSAGE("ENABLE_BINARY_BUILD=0; Building ${CRYPTO} library from source.")
endif()

if(ENABLE_CODEQL STREQUAL "ON")
    MESSAGE("Enable CodeQL scan.")
endif()

if(CMAKE_SYSTEM_NAME MATCHES "Linux")
    SET(CMAKE_EXE_EXPORTS_C_FLAG "")

    if(TOOLCHAIN STREQUAL "GCC")
        SET(CMAKE_C_COMPILER gcc)
        ADD_COMPILE_OPTIONS(-std=c99 -fshort-wchar -fno-strict-aliasing -Wall -Wno-array-bounds -ffunction-sections -fdata-sections -fno-common -Wno-address -fpie -fno-asynchronous-unwind-tables -DUSING_LTO  -Wno-maybe-uninitialized -Wno-uninitialized  -Wno-builtin-declaration-mismatch -Wno-nonnull-compare -Werror-implicit-function-declaration -Wcast-qual)
        if (ARCH STREQUAL "x64")
            ADD_COMPILE_OPTIONS(-mno-red-zone)
        endif()
        if (ARCH STREQUAL "x64" OR "ia32")
            ADD_COMPILE_OPTIONS(-maccumulate-outgoing-args)
        endif()
        if(CMAKE_BUILD_TYPE STREQUAL "Debug")
            ADD_COMPILE_OPTIONS(-g)
        endif()
        if(STACK_USAGE STREQUAL "ON")
            ADD_COMPILE_OPTIONS(-fstack-usage)
        else()
            ADD_COMPILE_OPTIONS(-flto)
        endif()
        if(GCOV STREQUAL "ON")
        ADD_COMPILE_OPTIONS(--coverage -fprofile-arcs -ftest-coverage)
        endif()
        SET(OPENSSL_FLAGS -include base.h -Wno-error=maybe-uninitialized -Wno-error=format -Wno-format -Wno-error=unused-but-set-variable -Wno-cast-qual)
        if(STACK_USAGE STREQUAL "ON")
            SET(OPENSSL_FLAGS ${OPENSSL_FLAGS} -fstack-usage)
        endif()
        SET(CMOCKA_FLAGS -std=gnu99 -Wpedantic -Wall -Wshadow -Wmissing-prototypes -Wcast-align -Werror=address -Wstrict-prototypes -Werror=strict-prototypes -Wwrite-strings -Werror=write-strings -Werror-implicit-function-declaration -Wpointer-arith -Werror=pointer-arith -Wdeclaration-after-statement -Werror=declaration-after-statement -Wreturn-type -Werror=return-type -Wuninitialized -Werror=uninitialized -Werror=strict-overflow -Wstrict-overflow=2 -Wno-format-zero-length -Wmissing-field-initializers -Wformat-security -Werror=format-security -fno-common -Wformat -fno-common -fstack-protector-strong -Wno-cast-qual)
        if(STACK_USAGE STREQUAL "ON")
            SET(CMOCKA_FLAGS ${CMOCKA_FLAGS} -fstack-usage)
        endif()

        SET(CMAKE_AR gcc-ar)

        if(NOT CMAKE_C_COMPILER_VERSION VERSION_GREATER_EQUAL 9.3)
                SET(CMAKE_C_ARCHIVE_FINISH true)
        endif()

        SET(CMAKE_LINKER gcc)
        SET(CMAKE_EXE_LINKER_FLAGS "-flto -Wno-error -no-pie" )
        if(GCOV STREQUAL "ON")
        SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS}  --coverage -lgcov -fprofile-arcs -ftest-coverage")
        endif()
        SET(CMAKE_C_LINK_EXECUTABLE "<CMAKE_LINKER> <LINK_FLAGS> <OBJECTS> -o <TARGET> -Wl,--start-group <LINK_LIBRARIES> -Wl,--end-group")

    elseif(TOOLCHAIN STREQUAL "CLANG")
        SET(CMAKE_C_COMPILER clang)
        ADD_COMPILE_OPTIONS(-std=c99 -fshort-wchar -fno-strict-aliasing -Wall -Werror -Wno-array-bounds -ffunction-sections -fdata-sections -fno-common -Wno-address -fpie -fno-asynchronous-unwind-tables -flto -DUSING_LTO -Werror-implicit-function-declaration)
        if(CMAKE_BUILD_TYPE STREQUAL "Debug")
           ADD_COMPILE_OPTIONS(-g)
        endif()
        if (ARCH STREQUAL "x64")
            ADD_COMPILE_OPTIONS(-mno-red-zone)
        endif()
        SET(OPENSSL_FLAGS -std=c11 -include base.h -Wno-error=format -Wno-format -Wno-cast-qual)
        SET(CMOCKA_FLAGS -std=gnu99 -Wpedantic -Wall -Wshadow -Wmissing-prototypes -Wcast-align -Werror=address -Wstrict-prototypes -Werror=strict-prototypes -Wwrite-strings -Werror=write-strings -Werror-implicit-function-declaration -Wpointer-arith -Werror=pointer-arith -Wdeclaration-after-statement -Werror=declaration-after-statement -Wreturn-type -Werror=return-type -Wuninitialized -Werror=uninitialized -Werror=strict-overflow -Wstrict-overflow=2 -Wno-format-zero-length -Wmissing-field-initializers -Wformat-security -Werror=format-security -fno-common -Wformat -fno-common -fstack-protector-strong -Wno-cast-qual)

        SET(CMAKE_AR llvm-ar)
        SET(CMAKE_RANLIB llvm-ranlib)

        SET(CMAKE_LINKER clang)
        SET(CMAKE_EXE_LINKER_FLAGS "-flto -Wno-error -no-pie" )

        SET(CMAKE_C_LINK_EXECUTABLE "<CMAKE_LINKER> <LINK_FLAGS> <OBJECTS> -o <TARGET> -Wl,--start-group <LINK_LIBRARIES> -Wl,--end-group")

    endif()

    if(ARCH STREQUAL "x64")
        ADD_COMPILE_OPTIONS(-m64 -mcmodel=small)
    elseif(ARCH STREQUAL "ia32")
        ADD_COMPILE_OPTIONS(-m32)
        SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -m32" )
    endif()
endif()

SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)
SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)

if(ENABLE_CODEQL STREQUAL "ON")
    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/library/spdm_common_lib)
    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/library/spdm_requester_lib)
    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/library/spdm_responder_lib)
    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/library/spdm_crypt_lib)
    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/library/spdm_secured_message_lib)
    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/library/spdm_transport_mctp_lib)
    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/library/spdm_transport_pcidoe_lib)
    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/os_stub/memlib)
    ADD_SUBDIRECTORY(${TEEIO_VALIDATOR_DIR}/library/debuglib)
    ADD_SUBDIRECTORY(${TEEIO_VALIDATOR_DIR}/library/helperlib)
    ADD_SUBDIRECTORY(${TEEIO_VALIDATOR_DIR}/library/spdmlib)
    ADD_SUBDIRECTORY(${TEEIO_VALIDATOR_DIR}/library/pcie_ide_lib)
    ADD_SUBDIRECTORY(${TEEIO_VALIDATOR_DIR}/library/pcie_ide_test_lib)
    ADD_SUBDIRECTORY(${TEEIO_VALIDATOR_DIR}/library/cxl_ide_lib)
    ADD_SUBDIRECTORY(${TEEIO_VALIDATOR_DIR}/library/cxl_ide_test_lib)
    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/os_stub/rnglib)
    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/os_stub/platform_lib)
    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/os_stub/platform_lib_null)
    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/os_stub/malloclib)
    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/os_stub/spdm_device_secret_lib_sample)
    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/os_stub/spdm_device_secret_lib_null)
    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/os_stub/cryptlib_null)
    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/os_stub/cryptlib_mbedtls)
    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/os_stub/cryptlib_openssl)
    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/os_stub/spdm_crypt_ext_lib)
else()

ADD_COMPILE_OPTIONS(-DLIBSPDM_CONFIG="${PROJECT_SOURCE_DIR}/include/spdm_lib_config.h")

    if(CRYPTO STREQUAL "mbedtls")
        ADD_SUBDIRECTORY(${LIBSPDM_DIR}/os_stub/cryptlib_mbedtls out/cryptlib_mbedtls.lib)
    elseif(CRYPTO STREQUAL "openssl")
        ADD_SUBDIRECTORY(${LIBSPDM_DIR}/os_stub/cryptlib_openssl out/cryptlib_openssl.lib)
    endif()

    if(NOT ENABLE_BINARY_BUILD STREQUAL "1")
        if(CRYPTO STREQUAL "mbedtls")
            ADD_SUBDIRECTORY(${LIBSPDM_DIR}/os_stub/mbedtlslib out/mbedtlslib.lib)
        elseif(CRYPTO STREQUAL "openssl")
            ADD_SUBDIRECTORY(${LIBSPDM_DIR}/os_stub/openssllib out/openssllib.lib)
        endif()
    endif()

    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/library/spdm_common_lib out/spdm_common_lib.lib)
    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/library/spdm_requester_lib out/spdm_requester_lib.lib)
    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/library/spdm_crypt_lib out/spdm_crypt_lib.lib)
    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/os_stub/spdm_crypt_ext_lib out/spdm_crypt_ext_lib.lib)
    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/library/spdm_secured_message_lib out/spdm_secured_message_lib.lib)
    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/library/spdm_transport_pcidoe_lib out/spdm_transport_pcidoe_lib.lib)
    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/os_stub/memlib out/spdm_memlib.lib)
    ADD_SUBDIRECTORY(${PROJECT_SOURCE_DIR}/library/debuglib out/debuglib.lib)
    ADD_SUBDIRECTORY(${PROJECT_SOURCE_DIR}/library/helperlib out/helperlib.lib)
    ADD_SUBDIRECTORY(${PROJECT_SOURCE_DIR}/library/spdmlib out/spdmlib.lib)
    ADD_SUBDIRECTORY(${PROJECT_SOURCE_DIR}/library/pcie_ide_lib out/pcie_ide_lib.lib)
    ADD_SUBDIRECTORY(${PROJECT_SOURCE_DIR}/library/pcie_ide_test_lib out/pcie_ide_test_lib.lib)
    ADD_SUBDIRECTORY(${PROJECT_SOURCE_DIR}/library/cxl_ide_lib out/cxl_ide_lib.lib)
    ADD_SUBDIRECTORY(${PROJECT_SOURCE_DIR}/library/cxl_ide_test_lib out/cxl_ide_test_lib.lib)
    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/os_stub/rnglib out/spdm_rnglib.lib)
    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/os_stub/platform_lib out/spdm_platform_lib.lib)
    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/os_stub/platform_lib_null out/spdm_platform_lib_null.lib)
    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/os_stub/malloclib out/spdm_malloclib.lib)
    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/os_stub/spdm_device_secret_lib_sample out/spdm_device_secret_lib_sample.lib)
    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/os_stub/spdm_device_secret_lib_null out/spdm_device_secret_lib_null.lib)

    ADD_SUBDIRECTORY(${LIBSPDM_DIR}/unit_test/test_size/intrinsiclib out/intrinsiclib.lib)

    ADD_SUBDIRECTORY(${SPDM_EMU_DIR}/library/pci_doe_requester_lib out/pci_doe_requester_lib.lib)
    ADD_SUBDIRECTORY(${SPDM_EMU_DIR}/library/pci_ide_km_requester_lib out/pci_ide_km_requester_lib.lib)
    ADD_SUBDIRECTORY(${SPDM_EMU_DIR}/library/cxl_ide_km_requester_lib out/cxl_ide_km_requester_lib.lib)
    ADD_SUBDIRECTORY(${SPDM_EMU_DIR}/library/pci_tdisp_requester_lib out/pci_tdisp_requester_lib.lib)

    ADD_SUBDIRECTORY(teeio_validator)
    ADD_SUBDIRECTORY(tools)

endif()